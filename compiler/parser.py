#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import graken, Parser
from grako.exceptions import *  # noqa


__version__ = '2014.11.21.07.05.19.04'

__all__ = [
    'planoutParser',
    'planoutSemanticParser',
    'planoutSemantics',
    'main'
]


class planoutParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=True,
        **kwargs):
        super(planoutParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            **kwargs
        )

    @graken()
    def _seq_(self):

        def block0():
            self._rule_()
        self._closure(block0)
        self._check_eof()

    @graken()
    def _comment_(self):
        self._pattern(r'\#.+\r?\n')

    @graken()
    def _semi_colon_(self):
        self._token(';')
        with self._optional():
            self._token('\r')
        with self._optional():
            self._token('\n')

    @graken()
    def _identifier_(self):
        self._pattern(r'[a-zA-Z][a-zA-Z0-9_]*')

    @graken()
    def _int_(self):
        self._pattern(r'-?[0-9]+')

    @graken()
    def _pointfloat_(self):
        self._pattern(r'([0-9]*\.[0-9]+|[0-9]+\.)')

    @graken()
    def _expfloat_(self):
        self._pattern(r'([0-9]+\.?|[0-9]*\.)[eE][+-]?[0-9]+')

    @graken()
    def _float_(self):
        with self._choice():
            with self._option():
                self._pointfloat_()
            with self._option():
                self._expfloat_()
            self._error('no available options')

    @graken()
    def _string_(self):
        self._pattern(r'\"(.+?)\"')

    @graken()
    def _true_(self):
        self._token('true')

    @graken()
    def _false_(self):
        self._token('false')

    @graken()
    def _null_(self):
        self._token('null')

    @graken()
    def _const_(self):
        with self._choice():
            with self._option():
                self._float_()
            with self._option():
                self._int_()
            with self._option():
                self._true_()
            with self._option():
                self._false_()
            with self._option():
                self._null_()
            with self._option():
                self._string_()
            self._error('no available options')

    @graken()
    def _rule_(self):
        with self._choice():
            with self._option():
                self._assignment_()
            with self._option():
                self._expression_()
                self._semi_colon_()
            with self._option():
                self._comment_()
            self._error('no available options')

    @graken()
    def _assign_(self):
        with self._choice():
            with self._option():
                self._token('<-')
            with self._option():
                self._token('=')
            self._error('expecting one of: <- =')

    @graken()
    def _value_(self):
        self._simple_expression_()

    @graken()
    def _assignment_(self):
        self._identifier_()
        self._assign_()
        self._cut()
        self._value_()
        self._semi_colon_()

    @graken()
    def _expression_(self):
        with self._choice():
            with self._option():
                self._return_expression_()
            with self._option():
                self._if_expression_()
            self._error('no available options')

    @graken()
    def _return_expression_(self):
        self._token('return')
        self._cut()
        self._simple_expression_()

    @graken()
    def _if_expression_(self):
        self._token('if')
        self._cut()
        self._token('(')
        self._simple_expression_()
        self._token(')')
        self._if_case_()
        with self._optional():
            self._optional_else_expression_()

    @graken()
    def _if_case_(self):
        self._token('{')
        self._cut()
        self._seq_()
        self._token('}')

    @graken()
    def _optional_else_expression_(self):
        with self._choice():
            with self._option():
                self._token('else')
                self._if_expression_()
            with self._option():
                self._token('else')
                self._if_case_()
            self._error('no available options')

    @graken()
    def _json_start_(self):
        self._token('@')

    @graken()
    def _json_(self):
        with self._choice():
            with self._option():
                self._identifier_()
            with self._option():
                self._const_()
            with self._option():
                self._token('[')
                self._json_array_()
                self._token(']')
            with self._option():
                self._token('{')
                self._json_map_()
                self._token('}')
            self._error('no available options')

    @graken()
    def _json_array_(self):
        with self._choice():
            with self._option():
                self._json_()
            with self._option():
                self._json_array_()
                self._token(',')
                self._json_()
            self._error('no available options')

    @graken()
    def _json_map_(self):
        with self._choice():
            with self._option():
                self._json_()
                self._token(':')
                self._json_()
            with self._option():
                self._json_map_()
                self._token(',')
                self._json_()
                self._token(':')
                self._json_()
            self._error('no available options')

    @graken()
    def _array_part_(self):
        with self._choice():
            with self._option():
                self._simple_expression_()
            with self._option():
                self._identifier_()
            self._error('no available options')

    @graken()
    def _array_(self):
        self._token('[')
        self._cut()
        self._array_part_()
        self.ast._append('@', self.last_node)

        def block1():
            self._token(',')
            self._array_part_()
            self.ast._append('@', self.last_node)
        self._closure(block1)
        self._token(']')

    @graken()
    def _mul_expr_(self):
        self._simple_expression_()
        self._token('*')
        self._cut()
        self._simple_expression_()

    @graken()
    def _sub_expr_(self):
        self._simple_expression_()
        self._token('-')
        self._cut()
        self._simple_expression_()

    @graken()
    def _add_expr_(self):
        self._simple_expression_()
        self._token('+')
        self._cut()
        self._simple_expression_()

    @graken()
    def _mod_expr_(self):
        self._simple_expression_()
        self._token('%')
        self._cut()
        self._simple_expression_()

    @graken()
    def _div_expr_(self):
        self._simple_expression_()
        self._token('/')
        self._cut()
        self._simple_expression_()

    @graken()
    def _gt_expr_(self):
        self._simple_expression_()
        self._token('>')
        self._cut()
        self._simple_expression_()

    @graken()
    def _lt_expr_(self):
        self._simple_expression_()
        self._token('<')
        self._cut()
        self._simple_expression_()

    @graken()
    def _eql_expr_(self):
        self._simple_expression_()
        self._token('==')
        self._cut()
        self._simple_expression_()

    @graken()
    def _ne_expr_(self):
        self._simple_expression_()
        self._token('!=')
        self._cut()
        self._simple_expression_()

    @graken()
    def _lte_expr_(self):
        self._simple_expression_()
        self._token('<=')
        self._cut()
        self._simple_expression_()

    @graken()
    def _gte_expr_(self):
        self._simple_expression_()
        self._token('>=')
        self._cut()
        self._simple_expression_()

    @graken()
    def _or_expr_(self):
        self._simple_expression_()
        self._token('or')
        self._cut()
        self._simple_expression_()

    @graken()
    def _and_expr_(self):
        self._simple_expression_()
        self._token('and')
        self._cut()
        self._simple_expression_()

    @graken()
    def _coalesce_expr_(self):
        self._simple_expression_()
        self._token('coalesce')
        self._cut()
        self._simple_expression_()

    @graken()
    def _neg_expr_(self):
        self._token('-')
        self._cut()
        self._simple_expression_()

    @graken()
    def _not_expr_(self):
        self._token('!')
        self._cut()
        self._simple_expression_()

    @graken()
    def _slice_expr_(self):
        self._simple_expression_()
        self._token('[')
        self._cut()
        self._simple_expression_()
        self._token(']')

    @graken()
    def _func_call_(self):
        self._identifier_()
        self._token('(')
        self._cut()
        self._arguments_()
        self._token(')')

    @graken()
    def _arguments_(self):
        self._argument_()
        self.ast._append('@', self.last_node)

        def block1():
            self._token(',')
            self._argument_()
            self.ast._append('@', self.last_node)
        self._closure(block1)

    @graken()
    def _argument_(self):
        with self._choice():
            with self._option():
                self._identifier_()
                self._token('=')
                self._cut()
                self._simple_expression_()
            with self._option():
                self._simple_expression_()
            self._error('no available options')

    @graken()
    def _get_expr_(self):
        self._identifier_()

    @graken()
    def _simple_expression_(self):
        with self._choice():
            with self._option():
                self._mul_expr_()
            with self._option():
                self._sub_expr_()
            with self._option():
                self._add_expr_()
            with self._option():
                self._mod_expr_()
            with self._option():
                self._div_expr_()
            with self._option():
                self._gt_expr_()
            with self._option():
                self._lt_expr_()
            with self._option():
                self._eql_expr_()
            with self._option():
                self._ne_expr_()
            with self._option():
                self._lte_expr_()
            with self._option():
                self._gte_expr_()
            with self._option():
                self._neg_expr_()
            with self._option():
                self._not_expr_()
            with self._option():
                self._or_expr_()
            with self._option():
                self._and_expr_()
            with self._option():
                self._coalesce_expr_()
            with self._option():
                self._slice_expr_()
            with self._option():
                self._array_()
            with self._option():
                self._json_start_()
                self._json_()
            with self._option():
                self._func_call_()
            with self._option():
                self._get_expr_()
            with self._option():
                self._const_()
                self._cut()
            self._error('no available options')


class planoutSemantics(object):
    def seq(self, ast):
        return ast

    def comment(self, ast):
        return ast

    def semi_colon(self, ast):
        return ast

    def identifier(self, ast):
        return ast

    def int(self, ast):
        return ast

    def pointfloat(self, ast):
        return ast

    def expfloat(self, ast):
        return ast

    def float(self, ast):
        return ast

    def string(self, ast):
        return ast

    def true(self, ast):
        return ast

    def false(self, ast):
        return ast

    def null(self, ast):
        return ast

    def const(self, ast):
        return ast

    def rule(self, ast):
        return ast

    def assign(self, ast):
        return ast

    def value(self, ast):
        return ast

    def assignment(self, ast):
        return ast

    def expression(self, ast):
        return ast

    def return_expression(self, ast):
        return ast

    def if_expression(self, ast):
        return ast

    def if_case(self, ast):
        return ast

    def optional_else_expression(self, ast):
        return ast

    def json_start(self, ast):
        return ast

    def json(self, ast):
        return ast

    def json_array(self, ast):
        return ast

    def json_map(self, ast):
        return ast

    def array_part(self, ast):
        return ast

    def array(self, ast):
        return ast

    def mul_expr(self, ast):
        return ast

    def sub_expr(self, ast):
        return ast

    def add_expr(self, ast):
        return ast

    def mod_expr(self, ast):
        return ast

    def div_expr(self, ast):
        return ast

    def gt_expr(self, ast):
        return ast

    def lt_expr(self, ast):
        return ast

    def eql_expr(self, ast):
        return ast

    def ne_expr(self, ast):
        return ast

    def lte_expr(self, ast):
        return ast

    def gte_expr(self, ast):
        return ast

    def or_expr(self, ast):
        return ast

    def and_expr(self, ast):
        return ast

    def coalesce_expr(self, ast):
        return ast

    def neg_expr(self, ast):
        return ast

    def not_expr(self, ast):
        return ast

    def slice_expr(self, ast):
        return ast

    def func_call(self, ast):
        return ast

    def arguments(self, ast):
        return ast

    def argument(self, ast):
        return ast

    def get_expr(self, ast):
        return ast

    def simple_expression(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = planoutParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in planoutParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for planout.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(args.file, args.startrule, trace=args.trace, whitespace=args.whitespace)
